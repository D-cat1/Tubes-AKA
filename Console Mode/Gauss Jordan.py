# -*- coding: utf-8 -*-
"""gauss jordan.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xCHygbzZXp6twaqvhTaokxVHJuDR-vix
"""

import numpy as np
import time
import matplotlib.pyplot as plt
from prettytable import PrettyTable

"""Gauss Jordan dengan perulangan"""

# Grafik untuk menyimpan data
n_values = []
recursive_times = []
iterative_times = []

# Fungsi untuk memperbarui grafik
def update_graph():
    plt.figure(figsize=(8, 6))
    plt.plot(n_values, recursive_times, label='Recursive', marker='o', linestyle='-')
    plt.plot(n_values, iterative_times, label='Iterative', marker='o', linestyle='-')
    plt.title('Performance Comparison: Recursive vs Iterative')
    plt.xlabel('Input (n)')
    plt.ylabel('Execution Time (seconds)')
    plt.legend()
    plt.grid(True)
    plt.show()

def print_execution_table():
    table = PrettyTable()
    table.field_names = ["n", "Recursive Time (s)", "Iterative Time (s)"]
    # Use the minimum length of all lists to avoid the IndexError
    min_len = min(len(n_values), len(recursive_times), len(iterative_times))
    for i in range(min_len):
        table.add_row([n_values[i], recursive_times[i], iterative_times[i]])
    print(table)

def iterative_gauss(a):
  n = len(a) - 1
  for i in range(n):
      if a[i][i] == 0.0:
          swapped = False
          for swap_row in range(i+1, n):
              if a[swap_row][i] != 0.0:
                  a[[i, swap_row]] = a[[swap_row, i]]  # Tukar baris
                  swapped = True
                  #print(f"Menukar baris {i} dengan baris {swap_row}")
                  break
          if not swapped:
              #print(f"Kesalahan: Elemen diagonal di baris {i} tetap nol! Tidak dapat menyelesaikan.")
              break
      pivot = a[i][i]
      a[i] = a[i] / pivot
      #print(f"Normalisasi baris {i}:")
      #print(a)
      for j in range(n):
          if i != j:
              ratio = a[j][i]
              a[j] = a[j] - ratio * a[i]
              #print(f"Eliminasi elemen di baris {j}, kolom {i}:")
              #print(a)
  else:
      #print("Matriks setelah eliminasi Gauss:")
      #print(a)
      solution = a[:, -1]
      #print("Solusi sistem persamaan:")
      #print(solution)
      return a

"""Gauss jordan dengan rekursif

"""

def normalize(matrix, row):
    """
    Rekursif untuk menormalisasi baris pivot `row`.
    """
    if matrix[row][row] == 1:
        return

    pivot = matrix[row][row]
    matrix[row] = matrix[row] / pivot

    # Rekursif selesai setelah baris sudah dinormalisasi
    return

def eliminate(matrix, row, col=0):
    """
    Rekursif untuk mengeliminasi elemen di kolom `row` untuk semua baris `col`.
    """
    if col >= len(matrix):
        return

    if col != row:
        ratio = matrix[col][row]
        matrix[col] = matrix[col] - ratio * matrix[row]

    # Panggil eliminasi untuk baris berikutnya
    eliminate(matrix, row, col + 1)

def swap_rows(matrix, row, swap_row=0):
    """
    Rekursif untuk mencari dan menukar baris jika elemen diagonal bernilai nol.
    """
    if swap_row >= len(matrix):
        return False  # Tidak ada baris yang dapat ditukar

    if matrix[swap_row][row] != 0.0:
        matrix[[row, swap_row]] = matrix[[swap_row, row]]
        return True

    # Rekursif untuk memeriksa baris berikutnya
    return swap_rows(matrix, row, swap_row + 1)

def gauss_elimination_recursive(matrix, row=0):
    """
    Rekursif untuk eliminasi Gauss.
    - matrix: Matriks augmented.
    - row: Baris pivot saat ini.
    """
    if row >= len(matrix):
        return matrix

    if matrix[row][row] == 0.0:
        if not swap_rows(matrix, row, row + 1):
            #print(f"Kesalahan: Elemen diagonal di baris {row} tetap nol! Tidak dapat menyelesaikan.")
            return matrix

    normalize(matrix, row)
    eliminate(matrix, row)

    # Rekursif untuk baris berikutnya
    return gauss_elimination_recursive(matrix, row + 1)

def main():
  for n in range(3,6):
    n_values.append(n)
    a = np.random.randint(1, 10, size=(n, n+1)).astype(float)
    print("Matrix Awal : \n", a)
    start_time = time.time()
    gauss_elimination_recursive(a)
    recursive_times.append(time.time() - start_time)
    start_time = time.time()
    iterative_gauss(a)
    iterative_times.append(time.time() - start_time)
  print_execution_table()



main()